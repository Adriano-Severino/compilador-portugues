use super::lexer::Token;

grammar;

pub Comando: ast::Comando = {
    "imprima" "(" <s: r#""[^"]*""#> ")" => ast::Comando::Imprima(s),
    "se" <cond: Expressao> "então" <cmd: Comando> => ast::Comando::Se(cond, Box::new(cmd)),
};

// Nova estrutura de precedência
pub Expressao: ast::Expressao = {
    #[precedence(level="2")] // Mais alta precedência
    ExpressaoPrimaria,
    #[precedence(level="1")] #[assoc(side="left")]
    <l:Expressao> ">" <r:Expressao> => ast::Expressao::Comparacao(
        ast::OperadorComparacao::MaiorQue,
        Box::new(l),
        Box::new(r)
    ),
};

ExpressaoPrimaria: ast::Expressao = {
    <n: r"[0-9]+"> => ast::Expressao::Inteiro(n),
    <id: r"[a-zA-Z_][a-zA-Z0-9_]*"> => ast::Expressao::Identificador(id),
};

extern {
    type Location = usize;
    type Error = String;
    
    enum Token {
        "se" => Token::TSe,
        "então" => Token::TEntao,
        "imprima" => Token::TImprima,
        "(" => Token::TParenEsq,
        ")" => Token::TParenDir,
        ">" => Token::TMaiorQue,
        r#""[^"]*""# => Token::TString(<String>),
        r"[a-zA-Z_][a-zA-Z0-9_]*" => Token::TIdentificador(<String>),
        r"[0-9]+" => Token::TInteiro(<i64>),
    }
}