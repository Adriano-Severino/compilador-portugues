use crate::ast;
use crate::lexer::Token;

grammar<'input>();

pub Arquivo: ast::Programa = {
    <items:ItemPrograma*> => {
        let mut namespaces = Vec::new();
        let mut declaracoes = Vec::new();
        
        for item in items {
            match item {
                ast::ItemPrograma::Namespace(ns) => namespaces.push(ns),
                ast::ItemPrograma::Declaracao(decl) => declaracoes.push(decl),
            }
        }
        
        ast::Programa { namespaces, declaracoes }
    }
};

ItemPrograma: ast::ItemPrograma = {
    <ns:Namespace> => ast::ItemPrograma::Namespace(ns),
    <decl:Declaracao> => ast::ItemPrograma::Declaracao(decl),
};

// === NAMESPACES ===
Namespace: ast::DeclaracaoNamespace = {
    "espaco" <nome:IdentificadorCompleto> "{" <declaracoes:Declaracao*> "}" => {
        ast::DeclaracaoNamespace { nome, declaracoes }
    }
};

// === IDENTIFICADORES ===
IdentificadorCompleto: String = {
    <primeiro:TIdentificador> <resto:("." <TIdentificador>)*> => {
        let mut resultado = primeiro;
        for parte in resto {
            resultado.push('.');
            resultado.push_str(&parte);
        }
        resultado
    }
};

// === IDENTIFICADORES ======================================================
// Nome simples vindo do lexer
#[inline]
IdentificadorSimples: String = { TIdentificador => <> };

// Alias para manter compatibilidade com regras antigas
Identificador: String = {
    <s:IdentificadorSimples> => s,
};

// === DECLARAÇÕES ===
Declaracao: ast::Declaracao = {
    <classe:DeclaracaoClasse> => ast::Declaracao::DeclaracaoClasse(classe),
    <funcao:DeclaracaoFuncao> => ast::Declaracao::DeclaracaoFuncao(funcao),
    <cmd:ComandoTopLevel> => ast::Declaracao::Comando(cmd),
};

// === MODIFICADORES DE ACESSO =============================================
ModificadorAcesso: ast::ModificadorAcesso = {
    "publico"   => ast::ModificadorAcesso::Publico,
    "privado"   => ast::ModificadorAcesso::Privado,
    "protegido" => ast::ModificadorAcesso::Protegido,
};

// === CLASSES ===
DeclaracaoClasse: ast::DeclaracaoClasse = {
    <modificador:ModificadorAcesso?> "classe" <nome:IdentificadorSimples> <heranca:("herda" <IdentificadorSimples>)?> "{" <membros:MembroClasse*> "}" => {
        let mut campos = Vec::new();
        let mut propriedades = Vec::new();
        let mut metodos = Vec::new();
        let mut construtores = Vec::new();

        for membro in membros {
            match membro {
                ast::MembroClasse::Campo(campo) => campos.push(campo),
                ast::MembroClasse::Propriedade(prop) => propriedades.push(prop),
                ast::MembroClasse::Metodo(metodo) => metodos.push(metodo),
                ast::MembroClasse::Construtor(construtor) => construtores.push(construtor),
            }
        }

        ast::DeclaracaoClasse {
            nome,
            classe_pai: heranca,
            modificador: modificador.unwrap_or(ast::ModificadorAcesso::Publico),
            campos,
            propriedades,
            metodos,
            construtores,
            eh_abstrata: false,
        }
    }
};

MembroClasse: ast::MembroClasse = {
    <c:ConstrutorDecl>      => ast::MembroClasse::Construtor(c),
    <f:CampoClasse>         => ast::MembroClasse::Campo(f),        // ← 1º
    <p:PropriedadeClasse>   => ast::MembroClasse::Propriedade(p),
    <m:MetodoClasse>        => ast::MembroClasse::Metodo(m),       // ←  por último
};

// === CAMPOS ===
CampoClasse: ast::CampoClasse = {
    // sem valor inicial
    <acc:ModificadorAcesso?> <t:Tipo> <id:IdentificadorSimples> ";" => {
        ast::CampoClasse {
            nome: id,
            tipo: t,
            modificador: acc.unwrap_or(ast::ModificadorAcesso::Privado),
            valor_inicial: None,
            eh_estatico: false,
        }
    },

    // com valor inicial
    <acc:ModificadorAcesso?> <t:Tipo> <id:IdentificadorSimples> "=" <v:Expressao> ";" => {
        ast::CampoClasse {
            nome: id,
            tipo: t,
            modificador: acc.unwrap_or(ast::ModificadorAcesso::Privado),
            valor_inicial: Some(v),
            eh_estatico: false,
        }
    },
};


// === PROPRIEDADES ===
PropriedadeClasse: ast::PropriedadeClasse = {
    <modificador:ModificadorAcesso?> <tipo:Tipo> <nome:IdentificadorSimples> "{" <acessores:AcessorPropriedade+> "}" => {
        let mut buscar = None;
        let mut definir = None;

        for acessor in acessores {
            match acessor {
                (true, modificador_acessor) => buscar = Some(ast::AcessorPropriedade { 
                    modificador: modificador_acessor, 
                    corpo: None 
                }),
                (false, modificador_acessor) => definir = Some(ast::AcessorPropriedade { 
                    modificador: modificador_acessor, 
                    corpo: None 
                }),
            }
        }

        ast::PropriedadeClasse {
            nome,
            tipo,
            modificador: modificador.unwrap_or(ast::ModificadorAcesso::Publico),
            buscar,
            definir,
            valor_inicial: None,
        }
    }
};

AcessorPropriedade: (bool, Option<ast::ModificadorAcesso>) = {
    <modificador:ModificadorAcesso?> "buscar" ";" => (true, modificador),
    <modificador:ModificadorAcesso?> "definir" ";" => (false, modificador),
};
// === FUNÇÕES E MÉTODOS ===
DeclaracaoFuncao: ast::DeclaracaoFuncao = {
    // 1. [mod] funcao nome (params) { corpo }      → retorno implícito = Vazio
    <m:ModificadorAcesso?> "funcao"
    <nome:IdentificadorSimples> "(" <params:InnerParamList> <body:BlocoComando> => {
        ast::DeclaracaoFuncao {
            nome,
            parametros: params,
            tipo_retorno: Some(ast::Tipo::Vazio),
            modificador: m.unwrap_or(ast::ModificadorAcesso::Publico),
            corpo: body,
        }
    },

    // 2. [mod] funcao nome (params) => Tipo { corpo }
    <m:ModificadorAcesso?> "funcao"
    <nome:IdentificadorSimples>
    "(" <params:InnerParamList> "=>" <ret:Tipo> <body:BlocoComando> => {
        ast::DeclaracaoFuncao {
            nome,
            parametros: params,
            tipo_retorno: Some(ret),
            modificador: m.unwrap_or(ast::ModificadorAcesso::Publico),
            corpo: body,
        }
    },

    // 3. [mod] funcao Tipo nome (params) { corpo }  – tipo antes do nome
    <m:ModificadorAcesso?> "funcao"
    <ret:Tipo> <nome:IdentificadorSimples>
    "(" <params:InnerParamList> <body:BlocoComando> => {
        ast::DeclaracaoFuncao {
            nome,
            parametros: params,
            tipo_retorno: Some(ret),
            modificador: m.unwrap_or(ast::ModificadorAcesso::Publico),
            corpo: body,
        }
    },
};

// — MÉTODO DE INSTÂNCIA ----------------------------------------------------
MetodoClasse: ast::MetodoClasse = {
    <m:ModificadorAcesso?>            // publico | privado | protegido
    <ret:Tipo>                       // inteiro | texto | Classe ...
    <nome:IdentificadorSimples>      // apresentar
    "(" <p:InnerParamList>    // (...)
    <b:BlocoComando>                 // { ... }
        => ast::MetodoClasse {
            nome,
            parametros: p, // InnerParamList directly returns Vec
            tipo_retorno: if ret == ast::Tipo::Vazio { None } else { Some(ret) }, // Handle 'vazio' for methods
            modificador: m.unwrap_or(ast::ModificadorAcesso::Publico),
            corpo: b,
            eh_virtual: false,
            eh_override: false,
            eh_abstrato: false,
            eh_estatico: false,
        },
};

// — CONSTRUTOR DE CLASSE ---------------------------------------------------
ConstrutorDecl: ast::ConstrutorClasse = {
    // sintaxe “C#” — contrutor nome da classe
    <m:ModificadorAcesso?> <nome:IdentificadorSimples>
        "(" <p:InnerParamList> <b:BlocoComando>
        => ast::ConstrutorClasse {
            parametros: p, // InnerParamList directly returns Vec
            modificador: m.unwrap_or(ast::ModificadorAcesso::Publico), // Construtores são geralmente públicos por padrão se não especificado
            corpo: b,
            nome_escrito: Some(nome),
        },

};

// === PARÂMETROS ===
// InnerParamList defines the content *between* parentheses for parameters.
//InnerParamList: Vec<ast::Parametro> = {
    //<params:ListaParametros?> => params.unwrap_or_default(),
//};

#[inline]                     // argumentos de chamada
ListaArgumentos: Vec<ast::Expressao> = {
    // primeiro , resto*
    <primeiro:Expressao> <rest:("," Expressao)*> => {
        let mut v = vec![primeiro];
        v.extend(rest.into_iter().map(|(_, e)| e));
        v
    }
};

#[inline]                     // parâmetros de declaração
ListaParametros: Vec<ast::Parametro> = {
    <primeiro:ParametroSimples> <rest:("," ParametroSimples)*> => {
        let mut v = vec![primeiro];
        v.extend(rest.into_iter().map(|(_, p)| p));
        v
    }
};

ParametroSimples: ast::Parametro = {
      // Parâmetro com valor padrão (C#-style)
    <tipo:Tipo> <nome:TIdentificador> "=" <valor:ExpressaoAtomo> => 
        ast::Parametro::opcional(nome, tipo, valor),
     // Parâmetro obrigatório
    <tipo:Tipo> <nome:TIdentificador> => 
        ast::Parametro::obrigatorio(nome, tipo),
};

// === COMANDOS SE/SENÃO ===
ComandoSe: ast::Comando = {
    // Se sem else
    "se" "(" <cond:Expressao> ")" <then_block:ComandoSimplesSemSe> => {
        ast::Comando::Se(cond, Box::new(then_block), None)
    },
    // Se com else
    "se" "(" <cond:Expressao> ")" <then_block:ComandoSimplesSemSe> "senão" <else_block:ComandoSimplesSemSe> => {
        ast::Comando::Se(cond, Box::new(then_block), Some(Box::new(else_block)))
    },
};

ComandoSimplesSemSe: ast::Comando = {     // Tudo que está em ComandoSimples exceto o comando Se
    "var" <nome:IdentificadorSimples> "=" <expr:Expressao> ";" => {
        ast::Comando::DeclaracaoVar(nome, expr)
    },
    <tipo:Tipo> <nome:IdentificadorSimples> "=" <expr:Expressao> ";" => {
        match expr {
            ast::Expressao::NovoObjeto(classe, args) => {
                ast::Comando::CriarObjeto(nome, classe, args)
            },
            _ => ast::Comando::DeclaracaoVariavel(tipo, nome, Some(expr))
        }
    },
    <tipo:Tipo> <nome:IdentificadorSimples> ";" => {
        ast::Comando::DeclaracaoVariavel(tipo, nome, None)
    },
    <cmd:ComandosBasicos> => cmd,
};

ComandosBasicos: ast::Comando = {
    <obj:ExpressaoIdentificador> "." <metodo:IdentificadorSimples> "(" <args:InnerArgList> ";" => {
        match obj {
            ast::Expressao::Identificador(nome) => ast::Comando::ChamarMetodo(nome, metodo, args),
            _ => panic!("Esperava um identificador simples")
        }
    },
    <obj:ExpressaoIdentificador> "." <prop:IdentificadorSimples> "=" <expr:Expressao> ";" => {
        match obj {
            ast::Expressao::Identificador(nome) => ast::Comando::AtribuirPropriedade(nome, prop, expr),
            _ => panic!("Esperava um identificador simples")
        }
    },
    <nome:IdentificadorSimples> "=" <expr:Expressao> ";" => {
        ast::Comando::Atribuicao(nome, expr)
    },
    "imprima" "(" <expr:Expressao> ")" ";" => {
        ast::Comando::Imprima(expr)
    },
    <bloco:BlocoComando> => ast::Comando::Bloco(bloco),
    "retorne" <expr:Expressao?> ";" => {
        ast::Comando::Retorne(expr)
    },
};

// === EXPRESSÃO IDENTIFICADOR ===
ExpressaoIdentificador: ast::Expressao = {
    <nome:IdentificadorSimples> => ast::Expressao::Identificador(nome),
};

// === TIPOS E IDENTIFICADORES ===
// Tipo primitivo ou classe
Tipo: ast::Tipo = {
    "inteiro" => ast::Tipo::Inteiro,
    "texto" => ast::Tipo::Texto,
    "booleano" => ast::Tipo::Booleano,
    "vazio" => ast::Tipo::Vazio,
    <nome:TIdentificador> => ast::Tipo::Classe(nome),
};

// === COMANDOS - ✅ ESTRUTURA SIMPLIFICADA ===
ComandoTopLevel: ast::Comando = {
    <cmd:ComandoSimples> => cmd,
};

ComandoSimples: ast::Comando = {
    // Declarações de variáveis
    <tipo:Tipo> <nome:TIdentificador> "=" <expr:Expressao> ";" => {
    ast::Comando::DeclaracaoVariavel(tipo, nome, Some(expr))
    },
    <tipo:Tipo> <nome:TIdentificador> ";" => {
    ast::Comando::DeclaracaoVariavel(tipo, nome, None)
    },

    "var" <nome:TIdentificador> "=" <expr:Expressao> ";" => {
        ast::Comando::DeclaracaoVar(nome, expr)
    },
    // Comandos de expressão e bloco
    <cmd:ChamadaMetodoOuBloco> => cmd,
    // Declarações e atribuições
    <cmd:AtribuicaoOuDeclaracao> => cmd,
    // Se e outros comandos
    <cmd:ComandoSe> => cmd,
    "enquanto" "(" <cond:Expressao> ")" <bloco:ComandoSimples> => {
        ast::Comando::Enquanto(cond, Box::new(bloco))
    },
    "para" "(" <init:ComandoSimples?> ";" <cond:Expressao?> ";" <incr:ComandoSimples?> ")" <bloco:ComandoSimples> => {
        ast::Comando::Para(
            init.map(Box::new),
            cond,
            incr.map(Box::new),
            Box::new(bloco)
        )
    },
};

ChamadaMetodoOuBloco: ast::Comando = {
    <obj:ExpressaoIdentificador> "." <metodo:TIdentificador> "(" <args:InnerArgList> ";" => {
        match obj {
            ast::Expressao::Identificador(nome) => ast::Comando::ChamarMetodo(nome, metodo, args),
            _ => panic!("Esperava um identificador simples")
        }
    },
    <bloco:BlocoComando> => ast::Comando::Bloco(bloco),
};

AtribuicaoOuDeclaracao: ast::Comando = {
    <obj:ExpressaoIdentificador> "." <prop:TIdentificador> "=" <expr:Expressao> ";" => { // This is property assignment
        match obj {
            ast::Expressao::Identificador(nome) => ast::Comando::AtribuirPropriedade(nome, prop, expr),
            _ => panic!("Esperava um identificador simples")
        }
    },
    <nome:TIdentificador> "=" <expr:Expressao> ";" => {
        ast::Comando::Atribuicao(nome, expr)
    },
    // Comandos de controle de fluxo
    "imprima" "(" <expr:Expressao> ")" ";" => {
        ast::Comando::Imprima(expr)
    },
    "retorne" <expr:Expressao?> ";" => {
        ast::Comando::Retorne(expr)
    },
};


BlocoComando: Vec<ast::Comando> = {
    "{" <comandos:ComandoSimples*> "}" => comandos
};

// === EXPRESSÕES - ✅ HIERARQUIA LIMPA ===
pub Expressao: ast::Expressao = {
    ExpressaoLogica
};

ExpressaoLogica: ast::Expressao = {
   // Expressões booleanas binárias
    <esq:ExpressaoLogica> "&&" <dir:ExpressaoComparacao> => {
        ast::Expressao::Logica(ast::OperadorLogico::E, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoLogica> "||" <dir:ExpressaoComparacao> => {
        ast::Expressao::Logica(ast::OperadorLogico::Ou, Box::new(esq), Box::new(dir))
    },
    ExpressaoComparacao,
};

ExpressaoComparacao: ast::Expressao = {
    <esq:ExpressaoAritmetica> "==" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::Igual, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> "!=" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::Diferente, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> "<" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::Menor, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> ">" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::MaiorQue, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> ">=" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::MaiorIgual, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> "<=" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::MenorIgual, Box::new(esq), Box::new(dir))
    },
    ExpressaoAritmetica,
};

ExpressaoAritmetica: ast::Expressao = {
    <esq:ExpressaoAritmetica> "+" <dir:ExpressaoTermo> => {
        ast::Expressao::Aritmetica(ast::OperadorAritmetico::Soma, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> "-" <dir:ExpressaoTermo> => {
        ast::Expressao::Aritmetica(ast::OperadorAritmetico::Subtracao, Box::new(esq), Box::new(dir))
    },
    ExpressaoTermo,
};

ExpressaoTermo: ast::Expressao = {
    <esq:ExpressaoTermo> "*" <dir:ExpressaoUnaria> => {
        ast::Expressao::Aritmetica(ast::OperadorAritmetico::Multiplicacao, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoTermo> "/" <dir:ExpressaoUnaria> => {
        ast::Expressao::Aritmetica(ast::OperadorAritmetico::Divisao, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoTermo> "%" <dir:ExpressaoUnaria> => {
        ast::Expressao::Aritmetica(ast::OperadorAritmetico::Modulo, Box::new(esq), Box::new(dir))
    },
    ExpressaoUnaria,
};

ExpressaoUnaria: ast::Expressao = {
    "!" <expr:ExpressaoUnaria> => {
        ast::Expressao::Unario(ast::OperadorUnario::NegacaoLogica, Box::new(expr))
    },
    "-" <expr:ExpressaoUnaria> => {
        ast::Expressao::Unario(ast::OperadorUnario::NegacaoNumerica, Box::new(expr))
    },
    ExpressaoPostfixa,
};

ExpressaoPostfixa: ast::Expressao = {
    <base:ExpressaoAtomo> => base,
    <obj:ExpressaoPostfixa> "." <membro:TIdentificador> "(" <args:InnerArgList> => {
        ast::Expressao::ChamadaMetodo(Box::new(obj), membro, args)
    },
    <obj:ExpressaoPostfixa> "." <membro:TIdentificador> => { // Property/field access
        ast::Expressao::AcessoMembro(Box::new(obj), membro)
    },
};

ExpressaoAtomo: ast::Expressao = {
    //<valor:TInteiro> => ast::Expressao::Inteiro(valor),
    //<valor:TString> => ast::Expressao::Texto(valor),
    <lit:ExpressaoLiteral> => lit,
    //<s:TStringInterpolada> => crate::interpolacao::parse_string_interpolada(&s).unwrap(),
    "verdadeiro" => ast::Expressao::Booleano(true),
    "falso" => ast::Expressao::Booleano(false),
    <nome:TIdentificador> "(" <args:InnerArgList> => { // Function call
        ast::Expressao::Chamada(nome, args)
    },
    <obj:CriacaoObjeto> => obj,
    "(" <expr:Expressao> ")" => expr,
    "este" => ast::Expressao::Este,    // Moved este after specific TIdentificador rules
    <nome:TIdentificador> => ast::Expressao::Identificador(nome), // Variable access (last among identifier-like atoms)
};
// Criação de objeto específica
CriacaoObjeto: ast::Expressao = {
    "novo" <classe:TIdentificador> "(" <args:InnerArgList> => {
        ast::Expressao::NovoObjeto(classe, args)
    },
};

// === VALORES LITERAIS ===
ValorLiteral: ast::Expressao = {
};

ExpressaoLiteral: ast::Expressao = {
    <s:TStringInterpolada> => crate::interpolacao::parse_string_interpolada(&s).unwrap(),
    <t:TString>            => ast::Expressao::Texto(t),
    <n:TInteiro>           => ast::Expressao::Inteiro(n),
};

// === ARGUMENTOS ===
/* ========= LISTAS INTERNAS (entre parênteses) ============= */

#[inline]                     // chamada de função
InnerArgList: Vec<ast::Expressao> = {
    ")"                         => vec![],                 // 0 argumentos
    <lista:ListaArgumentos> ")" => lista,                  // 1+ argumentos
};

#[inline]                     // cabeçalho de função
InnerParamList: Vec<ast::Parametro> = {
    ")"                         => vec![],                 // 0 parâmetros
    <lista:ListaParametros> ")" => lista,                  // 1+ parâmetros
};

// -------------------------------------------------------------------------
// LISTAS SEPARADAS POR VÍRGULA (1 ou mais) – argumentos e parâmetros
// -------------------------------------------------------------------------


// === MAPEAMENTO DE TOKENS ===
extern {
    type Location = usize;
    type Error = ();

    enum Token {
        // Palavras-chave
        "se" => Token::TSe,
        "senão" => Token::TSenao,
        "enquanto" => Token::TEnquanto,
        "para" => Token::TPara,
        "funcao" => Token::TFuncao,
        "retorne" => Token::TRetorne,
        "imprima" => Token::TImprima,
        "var" => Token::TVar,
        "espaco" => Token::TEspaco,
        
        // Tipos
        "inteiro" => Token::TTipoInteiro,
        "texto" => Token::TTipoTexto,
        "booleano" => Token::TTipoBooleano,
        "vazio" => Token::TTipoVazio,
        "verdadeiro" => Token::TVerdadeiro,
        "falso" => Token::TFalso,
        "classe" => Token::TClasse,
        "construtor" => Token::TConstrutor,
        "herda" => Token::THerda,
        "publico" => Token::TPublico,
        "privado" => Token::TPrivado,
        "protegido" => Token::TProtegido,
        "novo" => Token::TNovo,
        "este" => Token::TEste,
        "buscar" => Token::TBuscar,
        "definir" => Token::TDefinir,
        
        // Operadores
        "=" => Token::TAtribuicao,
        "==" => Token::TIgual,
        "!=" => Token::TDiferente,
        ">" => Token::TMaiorQue,
        ">=" => Token::TMaiorIgual,
        "<" => Token::TMenor,
        "<=" => Token::TMenorIgual,
        "+" => Token::TMais,
        "-" => Token::TMenos,
        "*" => Token::TMultiplicacao,
        "/" => Token::TDivisao,
        "%" => Token::TModulo,
        "&&" => Token::TE,
        "||" => Token::TOu,
        "!" => Token::TNao,
        
        // Delimitadores
        "(" => Token::TParenEsq,
        ")" => Token::TParenDir,
        "{" => Token::TChaveEsq,
        "}" => Token::TChaveDir,
        ";" => Token::TPontoVirgula,
        "," => Token::TVirgula,
        "=>" => Token::TSeta,
        "." => Token::TPonto,
        
        // Literais
        TString => Token::TString(<String>),
        TIdentificador => Token::TIdentificador(<String>),
        TInteiro => Token::TInteiro(<i64>),
        TStringInterpolada => Token::TStringInterpolada(<String>),

    }
}