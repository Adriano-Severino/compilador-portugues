use crate::ast;
use crate::lexer::Token;
use crate::interpolacao::parse_string_interpolada;

grammar;

// === PROGRAMA PRINCIPAL ===
pub Arquivo: ast::Programa = <Programa>;

Programa: ast::Programa = {
    <items:ItemPrograma*> => {
        let mut namespaces = Vec::new();
        let mut declaracoes = Vec::new();
        for item in items {
            match item {
                ast::ItemPrograma::Namespace(n) => namespaces.push(n),
                ast::ItemPrograma::Declaracao(d) => declaracoes.push(d),
            }
        }
        ast::Programa { namespaces, declaracoes }
    }
};

ItemPrograma: ast::ItemPrograma = {
    <n:Namespace> => ast::ItemPrograma::Namespace(n),
    <d:Declaracao> => ast::ItemPrograma::Declaracao(d),
};

// === NAMESPACES ===
Namespace: ast::DeclaracaoNamespace = {
    "espaco" <nome:NomeQualificado> "{" <declaracoes:Declaracao*> "}" => ast::DeclaracaoNamespace {
        nome,
        declaracoes,
    }
};

// === DECLARAÇÕES ===
Declaracao: ast::Declaracao = {
    <c:DeclaracaoClasse> => ast::Declaracao::DeclaracaoClasse(c),
    <f:DeclaracaoFuncao> => ast::Declaracao::DeclaracaoFuncao(f),
    <cmd:Comando> => ast::Declaracao::Comando(cmd),
};

// === CLASSES ===
DeclaracaoClasse: ast::DeclaracaoClasse = {
    <modificador:ModificadorAcesso?> "classe" <nome:Identificador> <heranca:("herda" <Identificador>)?> "{" <membros:MembroClasse*> "}" => {
        let mut campos = Vec::new();
        let mut propriedades = Vec::new();
        let mut metodos = Vec::new();
        let mut construtores = Vec::new();
        
        for membro in membros {
            match membro {
                ast::MembroClasse::Campo(c) => campos.push(c),
                ast::MembroClasse::Propriedade(p) => propriedades.push(p),
                ast::MembroClasse::Metodo(m) => metodos.push(m),
                ast::MembroClasse::Construtor(c) => construtores.push(c),
            }
        }
        
        ast::DeclaracaoClasse {
            nome,
            classe_pai: heranca,
            modificador: modificador.unwrap_or(ast::ModificadorAcesso::Publico),
            campos,
            propriedades,
            metodos,
            construtores,
            eh_abstrata: false,
        }
    }
};

MembroClasse: ast::MembroClasse = {
    <p:PropriedadeClasse> => ast::MembroClasse::Propriedade(p),
    <m:MetodoClasse> => ast::MembroClasse::Metodo(m),
    <c:ConstrutorClasse> => ast::MembroClasse::Construtor(c),
    <f:CampoClasse> => ast::MembroClasse::Campo(f),
};

// === CAMPOS ===
CampoClasse: ast::CampoClasse = {
    <modificador:ModificadorAcesso?> <tipo:TipoBasico> <nome:Identificador> <valor_inicial:("=" <Expressao>)?> ";" => ast::CampoClasse {
        nome,
        tipo,
        modificador: modificador.unwrap_or(ast::ModificadorAcesso::Privado),
        valor_inicial,
        eh_estatico: false,
    },
};

// === PROPRIEDADES ===
PropriedadeClasse: ast::PropriedadeClasse = {
    <modificador:ModificadorAcesso> <tipo:TipoBasico> <nome:Identificador> "{" <acessores:Acessor*> "}" => {
        let mut buscar = None;
        let mut definir = None;
        
        for (tipo_acessor, mod_acessor) in acessores {
            match tipo_acessor.as_str() {
                "buscar" => buscar = Some(ast::AcessorPropriedade { 
                    modificador: mod_acessor, 
                    corpo: None 
                }),
                "definir" => definir = Some(ast::AcessorPropriedade { 
                    modificador: mod_acessor, 
                    corpo: None 
                }),
                _ => {}
            }
        }
        
        ast::PropriedadeClasse { 
            nome, 
            tipo, 
            modificador, 
            buscar, 
            definir, 
            valor_inicial: None 
        }
    }
};

Acessor: (String, Option<ast::ModificadorAcesso>) = {
    <modificador:ModificadorAcesso?> "buscar" ";" => ("buscar".to_string(), modificador),
    <modificador:ModificadorAcesso?> "definir" ";" => ("definir".to_string(), modificador),
};

// === MÉTODOS ===
MetodoClasse: ast::MetodoClasse = {
    <modificador:ModificadorAcesso?> <tipo_retorno:TipoBasico> <nome:Identificador> "(" <params:ParametrosOpcionais> ")" <corpo:BlocoComando> => ast::MetodoClasse {
        nome,
        parametros: params,
        tipo_retorno: Some(tipo_retorno),
        modificador: modificador.unwrap_or(ast::ModificadorAcesso::Publico),
        corpo: corpo,
        eh_virtual: false,
        eh_override: false,
        eh_abstrato: false,
        eh_estatico: false,
    },
};

// === CONSTRUTOR COM PARÂMETROS PADRÃO ===
ConstrutorClasse: ast::Construtor = {
    <modificador:ModificadorAcesso?> <nome_classe:Identificador> "(" <params:ParametrosOpcionais> ")" <corpo:BlocoComando> => ast::Construtor {
        parametros: params,
        modificador: modificador.unwrap_or(ast::ModificadorAcesso::Publico),
        corpo: corpo,
    },
};

// === PARÂMETROS COM VALORES PADRÃO ===
ParametroCompleto: ast::Parametro = {
    // Parâmetro obrigatório
    <tipo:TipoBasico> <nome:Identificador> => ast::Parametro { 
        nome, 
        tipo, 
        valor_padrao: None 
    },
    // Parâmetro com valor padrão
    <tipo:TipoBasico> <nome:Identificador> "=" <valor:ExpressaoSimples> => ast::Parametro { 
        nome, 
        tipo, 
        valor_padrao: Some(valor) 
    },
};

// === FUNÇÕES GLOBAIS ===
DeclaracaoFuncao: ast::DeclaracaoFuncao = {
    // Função básica
    <modificador:ModificadorAcesso?> "funcao" <nome:Identificador> "(" <params:ParametrosOpcionais> ")" <corpo:BlocoComando> => ast::DeclaracaoFuncao {
        nome,
        parametros: params,
        tipo_retorno: None,
        modificador: modificador.unwrap_or(ast::ModificadorAcesso::Publico),
        corpo: corpo,
    },
    
    // Função com tipo de retorno (seta)
    <modificador:ModificadorAcesso?> "funcao" <nome:Identificador> "(" <params:ParametrosOpcionais> ")" "=>" <tipo_retorno:TipoBasico> <corpo:BlocoComando> => ast::DeclaracaoFuncao {
        nome,
        parametros: params,
        tipo_retorno: Some(tipo_retorno),
        modificador: modificador.unwrap_or(ast::ModificadorAcesso::Publico),
        corpo: corpo,
    },
    
    // Função com tipo no início
    <modificador:ModificadorAcesso?> "funcao" <tipo_retorno:TipoBasico> <nome:Identificador> "(" <params:ParametrosOpcionais> ")" <corpo:BlocoComando> => ast::DeclaracaoFuncao {
        nome,
        parametros: params,
        tipo_retorno: Some(tipo_retorno),
        modificador: modificador.unwrap_or(ast::ModificadorAcesso::Publico),
        corpo: corpo,
    },
};

// === PARÂMETROS ===
ParametrosOpcionais: Vec<ast::Parametro> = {
    <v:(<ParametroCompleto> ",")*> <e:ParametroCompleto?> => {
        let mut params = v;
        if let Some(p) = e { params.push(p); }
        params
    }
};

ParametroCompleto: ast::Parametro = {
    <tipo:TipoBasico> <nome:Identificador> <default_val_group: ("=" <Expressao>)?> => ast::Parametro {
        nome,
        tipo,
        valor_padrao: default_val_group.map(|g| g.1), // Changed to access tuple element
    },
};

// === ARGUMENTOS ===
ArgumentosOpcionais: Vec<ast::Expressao> = {
    <v:(<Expressao> ",")*> <e:Expressao?> => {
        let mut exprs = v;
        if let Some(expr) = e { exprs.push(expr); }
        exprs
    }
};

// === COMANDOS ===
Comando: ast::Comando = {
    <cmd:ComandoSimples> => cmd,
    <se:ComandoCondicional> => se,
    <enquanto:ComandoLoop> => enquanto,
    <bloco:BlocoComando> => ast::Comando::Bloco(bloco),
};

ComandoSimples: ast::Comando = {
    "imprima" "(" <expr:Expressao> ")" ";" => ast::Comando::Imprima(expr),
    "var" <nome:Identificador> "=" <valor:Expressao> ";" => ast::Comando::DeclaracaoVar(nome, valor),
    <tipo:TipoBasico> <nome:Identificador> <valor:("=" <Expressao>)?> ";" => ast::Comando::DeclaracaoVariavel(tipo, nome, valor),
    <obj:Identificador> "." <prop:Identificador> "=" <valor:Expressao> ";" => ast::Comando::AtribuirPropriedade(obj, prop, valor),
    <nome:Identificador> "=" <valor:Expressao> ";" => ast::Comando::Atribuicao(nome, valor),
    "retorne" <expr:Expressao?> ";" => ast::Comando::Retorne(expr),
    <expr:Expressao> ";" => ast::Comando::Expressao(expr),
};

BlocoComando: Vec<ast::Comando> = {
    "{" <comandos:Comando*> "}" => comandos,
};

ComandoCondicional: ast::Comando = {
    "se" "(" <cond:Expressao> ")" <bloco_then:BlocoComando> => ast::Comando::Se(
        cond,
        Box::new(ast::Comando::Bloco(bloco_then)),
        None
    ),
    "se" "(" <cond:Expressao> ")" <bloco_then:BlocoComando> "senão" <bloco_else:BlocoComando> => ast::Comando::Se(
        cond,
        Box::new(ast::Comando::Bloco(bloco_then)),
        Some(Box::new(ast::Comando::Bloco(bloco_else)))
    ),
    "se" "(" <cond:Expressao> ")" <bloco_then:BlocoComando> "senão" <cmd_se:ComandoCondicional> => ast::Comando::Se(
        cond,
        Box::new(ast::Comando::Bloco(bloco_then)),
        Some(Box::new(cmd_se))
    ),
};

ComandoLoop: ast::Comando = {
    "enquanto" <cond:Expressao> <bloco:BlocoComando> => ast::Comando::Enquanto(cond, Box::new(ast::Comando::Bloco(bloco))),
};

// === EXPRESSÕES ===
pub Expressao: ast::Expressao = {
    <val:TStringInterpolada> =>? Ok(parse_string_interpolada(&val)?),
    <expr:ExpressaoLogica> => expr,
};

ExpressaoLogica: ast::Expressao = {
    <esq:ExpressaoLogica> "||" <dir:ExpressaoComparacao> => {
        ast::Expressao::Logica(ast::OperadorLogico::Ou, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoLogica> "&&" <dir:ExpressaoComparacao> => {
        ast::Expressao::Logica(ast::OperadorLogico::E, Box::new(esq), Box::new(dir))
    },
    <expr:ExpressaoComparacao> => expr,
};

ExpressaoComparacao: ast::Expressao = {
    <esq:ExpressaoAritmetica> "==" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::Igual, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> "!=" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::Diferente, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> "<" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::Menor, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> ">" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::MaiorQue, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> ">=" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::MaiorIgual, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> "<=" <dir:ExpressaoAritmetica> => {
        ast::Expressao::Comparacao(ast::OperadorComparacao::MenorIgual, Box::new(esq), Box::new(dir))
    },
    <expr:ExpressaoAritmetica> => expr,
};

ExpressaoAritmetica: ast::Expressao = {
    <esq:ExpressaoAritmetica> "+" <dir:Termo> => {
        ast::Expressao::Aritmetica(ast::OperadorAritmetico::Soma, Box::new(esq), Box::new(dir))
    },
    <esq:ExpressaoAritmetica> "-" <dir:Termo> => {
        ast::Expressao::Aritmetica(ast::OperadorAritmetico::Subtracao, Box::new(esq), Box::new(dir))
    },
    <termo:Termo> => termo,
};

Termo: ast::Expressao = {
    <esq:Termo> "*" <dir:Fator> => {
        ast::Expressao::Aritmetica(ast::OperadorAritmetico::Multiplicacao, Box::new(esq), Box::new(dir))
    },
    <esq:Termo> "/" <dir:Fator> => {
        ast::Expressao::Aritmetica(ast::OperadorAritmetico::Divisao, Box::new(esq), Box::new(dir))
    },
    <esq:Termo> "%" <dir:Fator> => {
        ast::Expressao::Aritmetica(ast::OperadorAritmetico::Modulo, Box::new(esq), Box::new(dir))
    },
    <fator:Fator> => fator,
};

Fator: ast::Expressao = {
    "novo" <classe:Identificador> "(" <args:ArgumentosOpcionais> ")" => {
        ast::Expressao::NovoObjeto(classe, args)
    },
    <primario:Primario> => primario,
};

Primario: ast::Expressao = {
    <n:TInteiro> => ast::Expressao::Inteiro(n),
    <s:TString> => ast::Expressao::Texto(s),
    "verdadeiro" => ast::Expressao::Booleano(true),
    "falso" => ast::Expressao::Booleano(false),
    "este" => ast::Expressao::Este,
    <acesso:AcessoMembro> => acesso,
    <chamada:ChamadaFuncao> => chamada,
    <id:Identificador> => ast::Expressao::Identificador(id),
    "(" <expr:Expressao> ")" => expr,
};

ExpressaoSimples: ast::Expressao = {
    <n:TInteiro> => ast::Expressao::Inteiro(n),
    <s:TString> => ast::Expressao::Texto(s),
    "verdadeiro" => ast::Expressao::Booleano(true),
    "falso" => ast::Expressao::Booleano(false),
    <id:Identificador> => ast::Expressao::Identificador(id),
};

// === ACESSO A MEMBROS E CHAMADAS ===
AcessoMembro: ast::Expressao = {
    <obj:Identificador> "." <membro:Identificador> => {
        ast::Expressao::AcessoMembro(Box::new(ast::Expressao::Identificador(obj)), membro)
    },
    "este" "." <membro:Identificador> => {
        ast::Expressao::AcessoMembro(Box::new(ast::Expressao::Este), membro)
    },
};

ChamadaFuncao: ast::Expressao = {
    <obj:Identificador> "." <metodo:Identificador> "(" <args:ArgumentosOpcionais> ")" => {
        ast::Expressao::ChamadaMetodo(Box::new(ast::Expressao::Identificador(obj)), metodo, args)
    },
    "este" "." <metodo:Identificador> "(" <args:ArgumentosOpcionais> ")" => {
        ast::Expressao::ChamadaMetodo(Box::new(ast::Expressao::Este), metodo, args)
    },
    <nome:Identificador> "(" <args:ArgumentosOpcionais> ")" => {
        ast::Expressao::Chamada(nome, args)
    },
};

// === HELPERS ===
NomeQualificado: String = {
    <head:Identificador> <tail: ("." <Identificador>)*> => {
        let mut result = head;
        for (_dot, ident_str) in tail { // Destructure the tuple
            result.push('.');
            result.push_str(&ident_str); // Use the destructured ident_str
        }
        result
    }
};

TipoBasico: ast::Tipo = {
    "inteiro" => ast::Tipo::Inteiro,
    "texto" => ast::Tipo::Texto,
    "booleano" => ast::Tipo::Booleano,
    "vazio" => ast::Tipo::Vazio,
    <nome:Identificador> => ast::Tipo::Classe(nome),
};

ModificadorAcesso: ast::ModificadorAcesso = {
    "publico" => ast::ModificadorAcesso::Publico,
    "privado" => ast::ModificadorAcesso::Privado,
    "protegido" => ast::ModificadorAcesso::Protegido,
};

Identificador: String = <s:TIdentificador> => s;

// === TOKENS EXTERNOS ===
extern {
    type Location = usize;
    type Error = String;

    enum Token {
        "espaco" => Token::TEspaco,
        "classe" => Token::TClasse,
        "herda" => Token::THerda,
        "funcao" => Token::TFuncao,
        "publico" => Token::TPublico,
        "privado" => Token::TPrivado,
        "protegido" => Token::TProtegido,
        "novo" => Token::TNovo,
        "este" => Token::TEste,
        "buscar" => Token::TBuscar,
        "definir" => Token::TDefinir,
        "se" => Token::TSe,
        "senão" => Token::TSenao,
        "enquanto" => Token::TEnquanto,
        "imprima" => Token::TImprima,
        "retorne" => Token::TRetorne,
        "var" => Token::TVar,
        "inteiro" => Token::TTipoInteiro,
        "texto" => Token::TTipoTexto,
        "booleano" => Token::TTipoBooleano,
        "vazio" => Token::TTipoVazio,
        "verdadeiro" => Token::TVerdadeiro,
        "falso" => Token::TFalso,
        "=" => Token::TAtribuicao,
        "==" => Token::TIgual,
        "!=" => Token::TDiferente,
        "<" => Token::TMenor,
        ">" => Token::TMaiorQue,
        ">=" => Token::TMaiorIgual,
        "<=" => Token::TMenorIgual,
        "+" => Token::TMais,
        "-" => Token::TMenos,
        "*" => Token::TMultiplicacao,
        "/" => Token::TDivisao,
        "%" => Token::TModulo,
        "&&" => Token::TE,
        "||" => Token::TOu,
        "(" => Token::TParenEsq,
        ")" => Token::TParenDir,
        "{" => Token::TChaveEsq,
        "}" => Token::TChaveDir,
        ";" => Token::TPontoVirgula,
        "," => Token::TVirgula,
        "." => Token::TPonto,
        "=>" => Token::TSeta,
        TStringInterpolada => Token::TStringInterpolada(<String>),
        TString => Token::TString(<String>),
        TIdentificador => Token::TIdentificador(<String>),
        TInteiro => Token::TInteiro(<i64>),
    }
}