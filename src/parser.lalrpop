use super::lexer::Token;

grammar;

pub Comando: crate::ast::Comando = {
    "imprima" "(" <s:r#""[^"]*""#> ")" => crate::ast::Comando::Imprima(s),
    "se" <cond:Expressao> "então" <cmd:Comando> => crate::ast::Comando::Se(cond, Box::new(cmd)),
};

pub Expressao: crate::ast::Expressao = {
    #[precedence(level="0")] // Nível mais alto
    ExpressaoPrimaria,

    #[precedence(level="1")] // Nível do operador '>'
    #[assoc(side="left")]
    <left:Expressao> ">" <right:Expressao> => crate::ast::Expressao::Comparacao(
        crate::ast::OperadorComparacao::MaiorQue,
        Box::new(left),
        Box::new(right)
    ),
};

ExpressaoPrimaria: crate::ast::Expressao = {
    <n:r"[0-9]+"> => crate::ast::Expressao::Inteiro(n),
    <id:r"[a-zA-Z_][a-zA-Z0-9_]*"> => crate::ast::Expressao::Identificador(id),
};

extern {
    type Location = usize;
    type Error = String;
    
    enum Token {
        "se" => Token::TSe,
        "então" => Token::TEntao,
        "imprima" => Token::TImprima,
        "(" => Token::TParenEsq,
        ")" => Token::TParenDir,
        ">" => Token::TMaiorQue,
        r#""[^"]*""# => Token::TString(<String>),
        r"[a-zA-Z_][a-zA-Z0-9_]*" => Token::TIdentificador(<String>),
        r"[0-9]+" => Token::TInteiro(<i64>),
    }
}