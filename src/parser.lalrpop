use super::lexer::Token;

grammar;

pub Programa: crate::ast::Programa = {
    <comandos:Declaracao*> => crate::ast::Programa { comandos },
};

// Declaração pode ser comando com ; ou bloco sem ;
Declaracao: crate::ast::Comando = {
    <cmd:ComandoComPontoVirgula> ";" => cmd,
    <bloco:Bloco> => bloco,
    <se:ComandoSe> => se,
};

// Comandos que sempre precisam de ;
ComandoComPontoVirgula: crate::ast::Comando = {
    "imprima" "(" <s:r#""[^"]*""#> ")" => crate::ast::Comando::Imprima(s),
};

// Comando se pode ser seguido por comando simples OU bloco
ComandoSe: crate::ast::Comando = {
    "se" <cond:Expressao> "então" <cmd:ComandoComPontoVirgula> ";" => 
        crate::ast::Comando::Se(cond, Box::new(cmd)),
    "se" <cond:Expressao> "então" <bloco:Bloco> => 
        crate::ast::Comando::Se(cond, Box::new(bloco)),
};

Bloco: crate::ast::Comando = {
    "{" <comandos:Declaracao*> "}" => crate::ast::Comando::Bloco(comandos),
};

pub Expressao: crate::ast::Expressao = {
    #[precedence(level="0")]
    ExpressaoPrimaria,

    #[precedence(level="1")]
    #[assoc(side="left")]
    <left:Expressao> ">" <right:Expressao> => crate::ast::Expressao::Comparacao(
        crate::ast::OperadorComparacao::MaiorQue,
        Box::new(left),
        Box::new(right)
    ),
};

ExpressaoPrimaria: crate::ast::Expressao = {
    <n:r"[0-9]+"> => crate::ast::Expressao::Inteiro(n),
    <id:r"[a-zA-Z_][a-zA-Z0-9_]*"> => crate::ast::Expressao::Identificador(id),
};

extern {
    type Location = usize;
    type Error = String;
    
    enum Token {
        "se" => Token::TSe,
        "então" => Token::TEntao,
        "imprima" => Token::TImprima,
        "(" => Token::TParenEsq,
        ")" => Token::TParenDir,
        "{" => Token::TChaveEsq,
        "}" => Token::TChaveDir,
        ";" => Token::TPontoVirgula,
        ">" => Token::TMaiorQue,
        r#""[^"]*""# => Token::TString(<String>),
        r"[a-zA-Z_][a-zA-Z0-9_]*" => Token::TIdentificador(<String>),
        r"[0-9]+" => Token::TInteiro(<i64>),
    }
}