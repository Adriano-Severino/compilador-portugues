@{
use crate::interpolacao::parse_string_interpolada;
}

grammar;

// --- REGRAS DE TOPO ---
// Define o ponto de entrada do parser. Um arquivo é um programa.
pub Arquivo: ast::Programa = <Programa>;

// Um programa é uma lista de itens, que podem ser namespaces ou declarações.
Programa: ast::Programa = {
    <items:ItemPrograma*> => {
        let mut namespaces = Vec::new();
        let mut declaracoes = Vec::new();
        for item in items {
            match item {
                ast::ItemPrograma::Namespace(n) => namespaces.push(n),
                ast::ItemPrograma::Declaracao(d) => declaracoes.push(d),
            }
        }
        ast::Programa { namespaces, declaracoes }
    }
};

// Helper para distinguir namespaces de outras declarações no topo.
ItemPrograma: ast::ItemPrograma = {
    <n:Namespace> => ast::ItemPrograma::Namespace(n),
    <d:Declaracao> => ast::ItemPrograma::Declaracao(d),
};

// --- ESTRUTURAS PRINCIPAIS ---
Namespace: ast::DeclaracaoNamespace = {
    "espaco" <nome:NomeQualificado> "{" <declaracoes:Declaracao*> "}" => ast::DeclaracaoNamespace {
        nome,
        declaracoes,
    }
};

// Uma declaração pode ser uma classe, função, ou um comando solto (como `imprima`).
Declaracao: ast::Declaracao = {
    <c:DeclaracaoClasse> => ast::Declaracao::DeclaracaoClasse(c),
    <f:DeclaracaoFuncao> => ast::Declaracao::DeclaracaoFuncao(f),
    <cmd:Comando> => ast::Declaracao::Comando(cmd),
};


// --- CLASSES ---
DeclaracaoClasse: ast::DeclaracaoClasse = {
    <modificador:ModificadorAcesso?> "classe" <nome:Identificador> <heranca:("herda" <Identificador>)?> "{" <membros:MembroClasse*> "}" => {
        let mut campos = Vec::new();
        let mut propriedades = Vec::new();
        let mut metodos = Vec::new();
        let mut construtores = Vec::new();
        for membro in membros {
            match membro {
                ast::MembroClasse::Campo(c) => campos.push(c),
                ast::MembroClasse::Propriedade(p) => propriedades.push(p),
                ast::MembroClasse::Metodo(m) => metodos.push(m),
                ast::MembroClasse::Construtor(c) => construtores.push(c),
            }
        }
        ast::DeclaracaoClasse {
            nome,
            modificador: modificador.unwrap_or(ast::ModificadorAcesso::Privado),
            classe_pai: heranca,
            campos,
            propriedades,
            metodos,
            construtores,
            eh_abstrata: false,
        }
    }
};

MembroClasse: ast::MembroClasse = {
    <p:PropriedadeClasse> => ast::MembroClasse::Propriedade(p),
    <m:MetodoClasse> => ast::MembroClasse::Metodo(m),
    <c:Construtor> => ast::MembroClasse::Construtor(c),
    <f:CampoClasse> => ast::MembroClasse::Campo(f),
};

// Campo de classe: `privado texto nome;`
CampoClasse: ast::CampoClasse = {
    <modificador:ModificadorAcesso?> <tipo:Tipo> <nome:Identificador> <valor_inicial:("=" <Expressao>)?> ";" => ast::CampoClasse {
        nome,
        tipo,
        modificador: modificador.unwrap_or(ast::ModificadorAcesso::Privado),
        valor_inicial,
        eh_estatico: false,
    },
};

// Propriedade: `publico texto Nome { buscar; privado definir; }`
PropriedadeClasse: ast::PropriedadeClasse = {
    <modificador:ModificadorAcesso> <tipo:Tipo> <nome:Identificador> "{" <acessores:Acessor*> "}" => {
        let mut buscar = None;
        let mut definir = None;
        for acc in acessores {
            match acc {
                (Token::TBuscar, m) => buscar = Some(ast::AcessorPropriedade { modificador: m, corpo: None }),
                (Token::TDefinir, m) => definir = Some(ast::AcessorPropriedade { modificador: m, corpo: None }),
                 _ => unreachable!(), // A gramática garante que só TBuscar e TDefinir chegam aqui
            }
        }
        ast::PropriedadeClasse { nome, tipo, modificador, buscar, definir, valor_inicial: None }
    }
};

// Acessor de propriedade: `buscar;` ou `privado definir;`
Acessor: (Token, Option<ast::ModificadorAcesso>) = {
    <modificador:ModificadorAcesso?> "buscar" ";" => (Token::TBuscar, modificador),
    <modificador:ModificadorAcesso?> "definir" ";" => (Token::TDefinir, modificador),
};

// Método de Classe (Sintaxe C#)
MetodoClasse: ast::MetodoClasse = {
    <modificador:ModificadorAcesso?> <tipo_retorno:Tipo> <nome:Identificador> "(" <params:ListaParametros?> ")" <corpo:Bloco> => ast::MetodoClasse {
        nome,
        parametros: params.unwrap_or_default(),
        tipo_retorno: Some(tipo_retorno),
        modificador: modificador.unwrap_or(ast::ModificadorAcesso::Privado),
        corpo: match corpo { ast::Comando::Bloco(c) => c, cmd => vec![cmd] },
        eh_virtual: false, eh_override: false, eh_abstrato: false, eh_estatico: false,
    },
};

// Construtor (com o nome da classe)
Construtor: ast::Construtor = {
    <modificador:ModificadorAcesso?> <nome_classe:Identificador> "(" <params:ListaParametros?> ")" <corpo:Bloco> => ast::Construtor {
        // A verificação se `nome_classe` é igual ao nome da classe deve ser feita no type_checker
        parametros: params.unwrap_or_default(),
        modificador: modificador.unwrap_or(ast::ModificadorAcesso::Privado),
        corpo: match corpo { ast::Comando::Bloco(c) => c, cmd => vec![cmd] },
    },
};

// --- FUNÇÕES GLOBAIS ---
// Unifica todas as sintaxes de função em uma única regra.
DeclaracaoFuncao: ast::DeclaracaoFuncao = {
    <modificador:ModificadorAcesso?> "funcao" <tipo_retorno:Tipo?> <nome:Identificador> "(" <params:ListaParametros?> ")" <corpo:Bloco> => ast::DeclaracaoFuncao {
        nome,
        parametros: params.unwrap_or_default(),
        tipo_retorno: tipo_retorno, // Será None se não especificado
        modificador: modificador.unwrap_or(ast::ModificadorAcesso::Publico),
        corpo: match corpo { ast::Comando::Bloco(c) => c, cmd => vec![cmd] },
    },
};

// --- COMANDOS ---
Comando: ast::Comando = {
    <cmd:ComandoSimples> => cmd,
    <bloco:Bloco> => bloco,
    <se:ComandoSe> => se,
    <enquanto:ComandoEnquanto> => enquanto,
};
ComandoSimples: ast::Comando = {
    "imprima" "(" <expr:Expressao> ")" ";" => ast::Comando::Imprima(expr),
    "var" <nome:Identificador> "=" <valor:Expressao> ";" => ast::Comando::DeclaracaoVar(nome, valor),
    <tipo:Tipo> <nome:Identificador> <valor:("=" <Expressao>)?> ";" => ast::Comando::DeclaracaoVariavel(tipo, nome, valor),
    <nome:Identificador> "=" <valor:Expressao> ";" => ast::Comando::Atribuicao(nome, valor),
    "retorne" <expr:Expressao?> ";" => ast::Comando::Retorne(expr),
    <expr:Expressao> ";" => ast::Comando::Expressao(expr),
};

Bloco: ast::Comando = {
    "{" <comandos:Comando*> "}" => ast::Comando::Bloco(comandos),
};

ComandoSe: ast::Comando = {
    "se" <cond:Expressao> <bloco_then:Bloco> <senao:ClausulaSenao?> => ast::Comando::Se(
        cond,
        Box::new(bloco_then),
        senao.map(Box::new)
    ),
};

ClausulaSenao: ast::Comando = {
    "senão" <ComandoSe>,
    "senão" <Bloco>,
};

ComandoEnquanto: ast::Comando = {
    "enquanto" <cond:Expressao> <bloco:Bloco> => ast::Comando::Enquanto(cond, Box::new(bloco)),
};

// --- EXPRESSÕES ---
pub Expressao: ast::Expressao = {
    <val:TStringInterpolada> =>? parse_string_interpolada(&val),

    "novo" <classe:Identificador> "(" <args:ListaArgumentos?> ")" => ast::Expressao::NovoObjeto(classe, args.unwrap_or_default()),
    Termo,
};

Termo: ast::Expressao = {
    Fator <op:("+" | "-")> <term:Termo> =>? {
        // Implementar soma/subtração
        Ok(ast::Expressao::Identificador("TODO".to_string()))
    },
    Fator
};

Fator: ast::Expressao = {
    Primario <op:("*" | "/")> <factor:Fator> =>? {
       // Implementar mult/div
       Ok(ast::Expressao::Identificador("TODO".to_string()))
    },
    Primario
};

Primario: ast::Expressao = {
    <n:TInteiro> => ast::Expressao::Inteiro(n),
    <s:TString> => ast::Expressao::Texto(s),
    "verdadeiro" => ast::Expressao::Booleano(true),
    "falso" => ast::Expressao::Booleano(false),
    "este" => ast::Expressao::Este,
    <id:Identificador> => ast::Expressao::Identificador(id),
    "(" <Expressao> ")",
};

// --- HELPERS E LISTAS ---
NomeQualificado: String = {
    <head:Identificador> <tail:("." <Identificador>)*> => {
        let mut result = head;
        for part in tail {
            result.push('.');
            result.push_str(&part.1);
        }
        result
    }
};

// Lista de parâmetros para funções e métodos.
ListaParametros: Vec<ast::Parametro> = Comma<Parametro, ",">;
Parametro: ast::Parametro = {
    <tipo:Tipo> <nome:Identificador> => ast::Parametro { nome, tipo, valor_padrao: None },
};

// Lista de argumentos para chamadas de função.
ListaArgumentos: Vec<ast::Expressao> = Comma<Expressao, ",">;

// --- DEFINIÇÕES BÁSICAS ---
Tipo: ast::Tipo = {
    "inteiro" => ast::Tipo::Inteiro,
    "texto" => ast::Tipo::Texto,
    "booleano" => ast::Tipo::Booleano,
    "vazio" => ast::Tipo::Vazio,
    <nome:Identificador> => ast::Tipo::Classe(nome),
};

ModificadorAcesso: ast::ModificadorAcesso = {
    "publico" => ast::ModificadorAcesso::Publico,
    "privado" => ast::ModificadorAcesso::Privado,
    "protegido" => ast::ModificadorAcesso::Protegido,
};

// Mapeia tokens para seus tipos de dados.
Identificador: String = <s:TIdentificador> => s;

// Helper para listas separadas por vírgula ou ponto
Comma<T, S>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// --- TOKENS EXTERNOS ---
extern {
    type Location = usize;
    type Error = String;

    // A lista de tokens deve corresponder exatamente ao seu lexer.rs
    enum Token {
        "espaco" => Token::TEspaco,
        "classe" => Token::TClasse,
        "herda" => Token::THerda,
        "funcao" => Token::TFuncao,
        "metodo" => Token::TMetodo,
        "construtor" => Token::TConstrutor,
        "publico" => Token::TPublico,
        "privado" => Token::TPrivado,
        "protegido" => Token::TProtegido,
        "novo" => Token::TNovo,
        "este" => Token::TEste,
        "buscar" => Token::TBuscar,
        "definir" => Token::TDefinir,
        "se" => Token::TSe,
        "então" => Token::TEntao,
        "senão" => Token::TSenao,
        "enquanto" => Token::TEnquanto,
        "imprima" => Token::TImprima,
        "retorne" => Token::TRetorne,
        "var" => Token::TVar,
        "inteiro" => Token::TTipoInteiro,
        "texto" => Token::TTipoTexto,
        "booleano" => Token::TTipoBooleano,
        "vazio" => Token::TTipoVazio,
        "verdadeiro" => Token::TVerdadeiro,
        "falso" => Token::TFalso,
        "=" => Token::TAtribuicao,
        "(" => Token::TParenEsq,
        ")" => Token::TParenDir,
        "{" => Token::TChaveEsq,
        "}" => Token::TChaveDir,
        ";" => Token::TPontoVirgula,
        "," => Token::TVirgula,
        "." => Token::TPonto,
        TStringInterpolada => Token::TStringInterpolada(<String>),
        TString => Token::TString(<String>),
        TIdentificador => Token::TIdentificador(<String>),
        TInteiro => Token::TInteiro(<i64>),
    }
}